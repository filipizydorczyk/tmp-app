import { TaskRepository } from "@tmp/back/repositories/task-repo";
import { TaskDTO, NewTaskDTO } from "@tmp/back/dto";
import { isIsoDate, Page } from "@tmp/back/utils";
import uuid4 from "uuid4";

const PAGE_SIZE = 25;

export type TaskService = {
    getTasks: () => Promise<Page<TaskDTO>>;
    deleteTask: (id: string) => Promise<boolean>;
    updateTask: (task: TaskDTO) => Promise<boolean>;
    createTask: (task: NewTaskDTO) => Promise<TaskDTO>;
};

/**
 * Service for tasks
 * @param repository to make db calls
 * @returns object with functions to perform task actions
 */
export const useTaskService = (repository: TaskRepository): TaskService => {
    const {
        getAllTasks,
        deleteTask: deleteTaskFromDb,
        updateTask: updateTaskInDb,
        createTask: createTaskInDb,
    } = repository;

    /**
     * Function to get all tasks in database
     * @returns page type with content as task dto
     */
    const getTasks = async (): Promise<Page<TaskDTO>> => {
        const allTasks = await getAllTasks(0, PAGE_SIZE);
        return {
            ...allTasks,
            content: allTasks.content.map((task) => {
                return {
                    id: task.Id,
                    title: task.Title,
                    date: isIsoDate(task.Date) ? task.Date : "",
                    done: !!task.Done,
                    color: task.Color,
                    today: !!task.Today,
                } as TaskDTO;
            }),
        };
    };

    /**
     * Function to delted task with given id
     * @param id of task to be removed from db
     * @returns boolen if operation was successful
     */
    const deleteTask = async (id: string): Promise<boolean> => {
        return deleteTaskFromDb(id);
    };

    /**
     * Function to update task with dto
     * @param task dto with values to be updated. Id in
     * dto will be used to define task to be updated
     *
     * @returns boolen if operation was successful
     */
    const updateTask = async (task: TaskDTO): Promise<boolean> => {
        return updateTaskInDb({
            Id: task.id,
            Title: task.title,
            Date: isIsoDate(task.date) ? task.date : "",
            Done: task.done ? 1 : 0,
            Color: task.color || "#ffffff",
            Today: task.today ? 1 : 0,
        });
    };

    /**
     * Function to create new task
     * @param task dto to be inserted to database. Id will be
     * generated by reporitory even if you provide any in dto
     *
     * @returns dto of created task
     */
    const createTask = async (task: NewTaskDTO): Promise<TaskDTO> => {
        const createdTask = await createTaskInDb({
            Id: uuid4(),
            Title: task.title,
            Done: 0,
            Date: new Date().toISOString(),
            Color: "",
            Today: 0,
        });

        return {
            id: createdTask.Id,
            title: createdTask.Title,
            date: isIsoDate(createdTask.Date) ? createdTask.Date : "",
            done: !!createdTask.Done,
        } as TaskDTO;
    };

    return { getTasks, deleteTask, updateTask, createTask };
};

export default useTaskService;
